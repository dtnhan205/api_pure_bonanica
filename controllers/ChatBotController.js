// controllers/chatController.js
const ChatMessage = require('../models/chatBot');
const Joi = require('joi');
const mongoose = require('mongoose');
const fetch = require('node-fetch'); // C·∫ßn install node-fetch n·∫øu ch∆∞a c√≥
const { v4: uuidv4 } = require('uuid'); // C·∫ßn install uuid n·∫øu ch∆∞a c√≥

// API setup (l·∫•y t·ª´ env ƒë·ªÉ b·∫£o m·∫≠t)
const API_KEY = process.env.GEMINI_API_KEY;
const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;

// Validation schemas
const messageValidationSchema = Joi.object({
  sessionId: Joi.string().optional(), // N·∫øu kh√¥ng c√≥, t·∫°o m·ªõi
  message: Joi.string().required(),
  file: Joi.object({
    data: Joi.string().optional(),
    mime_type: Joi.string().optional(),
  }).optional(),
});

// T·∫°o session chat m·ªõi ho·∫∑c l·∫•y session hi·ªán t·∫°i
exports.createOrGetSession = async (req, res) => {
  try {
    let { sessionId } = req.body;
    if (!sessionId) {
      sessionId = uuidv4();
    }

    // Ki·ªÉm tra session t·ªìn t·∫°i b·∫±ng c√°ch l·∫•y tin nh·∫Øn ƒë·∫ßu ti√™n
    const existingMessage = await ChatMessage.findOne({ sessionId });
    if (!existingMessage) {
      // T·∫°o tin nh·∫Øn ch√†o m·ª´ng t·ª´ bot
      const welcomeMessage = new ChatMessage({
        sessionId,
        role: 'model',
        content: 'Xin ch√†o üëã\nT√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?',
      });
      await welcomeMessage.save();
    }

    res.status(200).json({ sessionId });
  } catch (error) {
    console.error('L·ªói trong createOrGetSession:', error);
    res.status(500).json({ error: 'L·ªói server khi t·∫°o ho·∫∑c l·∫•y session chat' });
  }
};

// G·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ bot
exports.sendMessage = async (req, res) => {
  try {
    const { error, value } = messageValidationSchema.validate(req.body);
    if (error) {
      return res.status(400).json({ error: error.details.map((e) => e.message).join(', ') });
    }

    const { sessionId, message, file } = value;

    if (!sessionId) {
      return res.status(400).json({ error: 'Session ID l√† b·∫Øt bu·ªôc' });
    }

    // L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
    const userMessage = new ChatMessage({
      sessionId,
      role: 'user',
      content: message,
      file: file || null,
    });
    await userMessage.save();

    // L·∫•y l·ªãch s·ª≠ chat cho session
    const chatHistory = await ChatMessage.find({ sessionId })
      .sort({ timestamp: 1 })
      .lean()
      .then(messages => messages.map(msg => ({
        role: msg.role,
        parts: [{ text: msg.content }, ...(msg.file?.data ? [{ inline_data: msg.file }] : [])],
      })));

    // G·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API
    const requestOptions = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ contents: chatHistory }),
    };

    const response = await fetch(API_URL, requestOptions);
    const data = await response.json();
    if (!response.ok) throw new Error(data.error.message);

    const botResponseText = data.candidates[0].content.parts[0].text.replace(/\*\*(.*?)\*\*/g, '$1').trim();

    // L∆∞u tin nh·∫Øn bot
    const botMessage = new ChatMessage({
      sessionId,
      role: 'model',
      content: botResponseText,
    });
    await botMessage.save();

    res.status(200).json({ message: botResponseText });
  } catch (error) {
    console.error('L·ªói trong sendMessage:', error);
    res.status(500).json({ error: 'L·ªói server khi g·ª≠i tin nh·∫Øn', details: error.message });
  }
};

// L·∫•y l·ªãch s·ª≠ chat theo session
exports.getChatHistory = async (req, res) => {
  try {
    const { sessionId } = req.params;
    if (!sessionId) {
      return res.status(400).json({ error: 'Session ID l√† b·∫Øt bu·ªôc' });
    }

    const messages = await ChatMessage.find({ sessionId })
      .select('role content file timestamp')
      .sort({ timestamp: 1 })
      .lean();

    res.status(200).json({ messages });
  } catch (error) {
    console.error('L·ªói trong getChatHistory:', error);
    res.status(500).json({ error: 'L·ªói server khi l·∫•y l·ªãch s·ª≠ chat' });
  }
};

// X√≥a session chat
exports.deleteSession = async (req, res) => {
  try {
    const { sessionId } = req.params;
    if (!sessionId) {
      return res.status(400).json({ error: 'Session ID l√† b·∫Øt bu·ªôc' });
    }

    await ChatMessage.deleteMany({ sessionId });
    res.status(200).json({ message: 'X√≥a session chat th√†nh c√¥ng' });
  } catch (error) {
    console.error('L·ªói trong deleteSession:', error);
    res.status(500).json({ error: 'L·ªói server khi x√≥a session chat' });
  }
};